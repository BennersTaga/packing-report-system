name: Auto PR: mock shipment UI

on:
  push:
    branches: [main]          # ← パス制限を外す
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  make-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply changes (replace/env/files)
        shell: bash
        run: |
          set -euo pipefail

          # 1) NEXT_PUBLIC_GAS_ENDPOINT → GAS_ENDPOINT 置換（存在するファイルだけ）
          for f in \
            lib/gas-sheets.ts \
            pages/api/packing/index.ts \
            pages/api/packing/search.ts \
            pages/api/packing/update.ts
          do
            if [ -f "$f" ]; then
              sed -i 's/process\.env\.NEXT_PUBLIC_GAS_ENDPOINT/process.env.GAS_ENDPOINT/g' "$f"
            fi
          done

          # 2) .env.example をサーバ専用に
          printf "GAS_ENDPOINT=\n" > .env.example

          # 3) pages/api/test-env.ts を上書き
          mkdir -p pages/api
          cat > pages/api/test-env.ts <<'EOF'
          import type { NextApiRequest, NextApiResponse } from 'next';
          export default function handler(req: NextApiRequest, res: NextApiResponse) {
            res.status(200).json({
              GAS_ENDPOINT: process.env.GAS_ENDPOINT ? '設定済み' : '未設定',
            });
          }
          EOF

          # 4) /pages/mock/shipment.tsx 新規（UI要件入り）
          mkdir -p pages/mock
          cat > pages/mock/shipment.tsx <<'EOF'
          import React, { useEffect, useMemo, useState } from 'react';
          type PackingItem = {
            rowIndex: number;
            manufactureDate: string;
            manufactureProduct: string;
            status: string;
            quantity: number;
            packingInfo: { location: string; quantity: string; user: string };
          };
          export default function ShipmentPage() {
            const [items, setItems] = useState<PackingItem[]>([]);
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState<string | null>(null);

            const [text, setText] = useState('');
            const [date, setDate] = useState('');
            const [status, setStatus] = useState('');
            const [quantityMin, setQuantityMin] = useState('');
            const [quantityMax, setQuantityMax] = useState('');

            async function search() {
              setLoading(true);
              setError(null);
              try {
                const params = new URLSearchParams();
                if (date) params.append('date', date);
                if (status) params.append('status', status);
                if (quantityMin) params.append('quantityMin', quantityMin);
                if (quantityMax) params.append('quantityMax', quantityMax);
                if (text) params.append('product', text);
                const res = await fetch('/api/packing/search?' + params.toString(), { cache: 'no-store' });
                const j = await res.json();
                if (!j.success) throw new Error(j.error || 'failed');
                const data: PackingItem[] = j.data || [];
                const t = text.toLocaleLowerCase();
                const filtered = t ? data.filter(d => d.manufactureProduct.toLocaleLowerCase().includes(t)) : data;
                setItems(filtered);
              } catch (e: any) {
                setError(e.message);
                setItems([]);
              } finally {
                setLoading(false);
              }
            }
            useEffect(() => { search(); }, []);

            type Row = { key: string; rowIndex: number; location: string; quantity: string; user: string; };
            const [rows, setRows] = useState<Row[]>([]);

            function addToEditor(item: PackingItem) {
              const key = `${item.rowIndex}_${item.packingInfo.location}`;
              if (rows.some(r => r.key === key)) return; // 重複抑止
              if (item.quantity <= 0) return;            // 在庫0は無効
              setRows(prev => [...prev, { key, rowIndex: item.rowIndex, location: item.packingInfo.location, quantity: '1', user: item.packingInfo.user || '' }]);
            }

            const anyInvalid = rows.some(r => !r.quantity || Number(r.quantity) <= 0);
            const [submitting, setSubmitting] = useState(false);

            async function submit() {
              if (rows.length === 0 || submitting || anyInvalid) return;
              setSubmitting(true);
              try {
                for (const r of rows) {
                  const res = await fetch('/api/packing/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ rowIndex: r.rowIndex, packingData: { location: r.location, quantity: r.quantity, user: r.user } }),
                  });
                  const j = await res.json();
                  if (!j.success) throw new Error(j.error || 'unknown');
                }
                alert('更新しました');
                setRows([]);
                await search();
              } catch (e: any) {
                alert('更新に失敗: ' + e.message);
              } finally {
                setSubmitting(false);
              }
            }

            const filtered = useMemo(() => {
              const t = text.toLocaleLowerCase();
              return items.filter(item => !t || item.manufactureProduct.toLocaleLowerCase().includes(t));
            }, [items, text]);

            return (
              <div className="p-4 space-y-4">
                <div className="space-x-2">
                  <input value={text} onChange={e => setText(e.target.value)} placeholder="検索" className="border px-2 py-1" />
                  <button onClick={search} className="px-3 py-1 border">再検索</button>
                </div>
                {loading && <div>読み込み中…</div>}
                {error && <div className="text-red-600">エラー: {error}</div>}
                <ul className="space-y-2">
                  {filtered.map(item => (
                    <li key={`${item.rowIndex}_${item.packingInfo.location}`} className="border p-2 flex justify-between">
                      <div>
                        <div>{item.manufactureProduct}</div>
                        <div className="text-xs text-slate-500">{item.packingInfo.location} / {item.quantity}</div>
                      </div>
                      <button disabled={item.quantity <= 0} onClick={() => addToEditor(item)} className="px-2 py-1 border rounded disabled:opacity-50">
                        出荷に追加
                      </button>
                    </li>
                  ))}
                </ul>
                <div className="border p-3">
                  <h2 className="font-semibold mb-2">出荷エディタ</h2>
                  {rows.length === 0 ? (
                    <div className="text-sm text-slate-500">追加した行がここに表示されます</div>
                  ) : (
                    <table className="min-w-full text-sm mb-3">
                      <thead><tr className="text-left"><th className="p-1">ロケーション</th><th className="p-1">数量</th><th className="p-1">担当</th><th></th></tr></thead>
                      <tbody>
                        {rows.map(r => (
                          <tr key={r.key}>
                            <td className="p-1"><input value={r.location} onChange={e => setRows(prev => prev.map(x => x.key === r.key ? { ...x, location: e.target.value } : x))} className="border px-1" /></td>
                            <td className="p-1"><input type="number" min={1} value={r.quantity} onChange={e => setRows(prev => prev.map(x => x.key === r.key ? { ...x, quantity: e.target.value } : x))} className="border px-1" /></td>
                            <td className="p-1"><input value={r.user} onChange={e => setRows(prev => prev.map(x => x.key === r.key ? { ...x, user: e.target.value } : x))} className="border px-1" /></td>
                            <td className="p-1"><button onClick={() => setRows(prev => prev.filter(x => x.key !== r.key))} className="text-xs text-red-600">削除</button></td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  )}
                  <button disabled={rows.length === 0 || anyInvalid || submitting} onClick={submit} className="px-3 py-1 border rounded bg-emerald-600 text-white disabled:bg-slate-300">
                    {submitting ? '送信中…' : '出荷を登録'}
                  </button>
                </div>
              </div>
            );
          }
          EOF

      - name: Git debug (what changed)
        run: |
          git status
          echo "---- changed files ----"
          git ls-files -m -o --exclude-standard || true

      - name: Create Pull Request (peter-evans)
        id: cpr
        continue-on-error: true
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: feat/mock-shipment-ui
          base: main
          commit-message: "feat(mock-shipment-ui): add mock shipment page and unify GAS endpoint"
          title: "feat(mock-shipment-ui): add mock shipment page and unify GAS endpoint"
          body: |
            GAS_ENDPOINTに統一し、/mock/shipment を追加。ケースインセンシティブ検索／在庫0無効／重複防止／送信中ガード／成功/失敗通知を実装。

            **動作確認**
            1. `.env.local` に `GAS_ENDPOINT=<GAS WebApp URL>` を設定（コミット禁止）
            2. `npm ci && npm run dev`
            3. `http://localhost:3000/mock/shipment` にアクセスして検索・出荷登録を確認
          labels: automated
          draft: false

      - name: Fallback PR via API (if peter-evans failed)
        if: steps.cpr.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="feat/mock-shipment-ui"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B "$BRANCH"
          git add -A || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "feat(mock-shipment-ui): add mock shipment page and unify GAS endpoint"
            git push -u origin "$BRANCH"
          fi

          cat > pr.json <<JSON
          {
            "title": "feat(mock-shipment-ui): add mock shipment page and unify GAS endpoint",
            "head": "$BRANCH",
            "base": "main",
            "body": "GAS_ENDPOINTに統一し、/mock/shipment を追加。ケースインセンシティブ検索／在庫0無効／重複防止／送信中ガード／成功/失敗通知を実装。\\n\\n**動作確認**\\n1. .env.local に GAS_ENDPOINT=<GAS WebApp URL> を設定（コミット禁止）\\n2. npm ci && npm run dev\\n3. http://localhost:3000/mock/shipment にアクセスして検索・出荷登録を確認"
          }
          JSON

          curl -fsSL -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/pulls" \
            -d @pr.json || {
              echo "PR API call failed (possibly already exists). Listing open PRs for reference..."
              curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/$REPO/pulls?state=open"
            }

      - name: Show PR URL (peter-evans)
        if: steps.cpr.outputs.pull-request-url != ''
        run: echo "PR: ${{ steps.cpr.outputs.pull-request-url }}"
        
